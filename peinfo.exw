-- Тестовая программа для проверки правильности работы функций модуля pe.e

include std/pretty.e
include std/search.e
include std/console.e

include pe.e
include patcher.e

-- atom fn = open("d:\\Games\\df_34_09_win\\Dwarf Fortress.exe","rb")
atom fn = open("d:\\Games\\df_34_11_win\\Dwarf Fortress Rus.exe","ub")
constant pe_header = check_pe(fn)

seek(fn,pe_header)
printf(1,"Signature: %s\n",{get_bytes(fn,4)})
puts(1,'\n')
printf(1,"Machine: %xh\n",get_integer16(fn))
integer NumberOfSections = get_integer16(fn)
printf(1,"NumberOfSections: %d\n",NumberOfSections)
printf(1,"TimeDateStamp: %d\n",get_integer32(fn))
printf(1,"PointerToSymbolTable: %d\n",get_integer32(fn))
printf(1,"NumberOfSymbols: %d\n",get_integer32(fn))
printf(1,"SizeOfOptionalHeader: %d\n",get_integer16(fn))
printf(1,"Characteristics: %d\n",get_integer16(fn))
puts(1,'\n')
printf(1,"Magic: %xh\n",get_integer16(fn))
printf(1,"LinkerVersion: %d %d\n",get_bytes(fn,2))
printf(1,"SizeOfCode: %xh\n",get_integer32(fn))
printf(1,"SizeOfInitializedData: %xh\n",get_integer32(fn))
printf(1,"SizeOfUninitializedData: %xh\n",get_integer32(fn))
printf(1,"AddressOfEntryPoint: %xh\n",get_integer32(fn))
printf(1,"BaseOfCode: %xh\n",get_integer32(fn))
printf(1,"BaseOfData: %xh\n",get_integer32(fn))
printf(1,"ImageBase: %xh\n",get_integer32(fn))
printf(1,"SectionAlignment: %xh\n",get_integer32(fn))
printf(1,"FileAlignment: %xh\n",get_integer32(fn))
printf(1,"OperatingSystemVersion: %d %d\n",{get_integer16(fn),get_integer16(fn)})
printf(1,"ImageVersion: %d %d\n",{get_integer16(fn),get_integer16(fn)})
printf(1,"SubsystemVersion: %d %d\n",{get_integer16(fn),get_integer16(fn)})
printf(1,"Win32VersionValue: %d %d\n",get_integer32(fn))
printf(1,"SizeOfImage: %xh\n",get_integer32(fn))
printf(1,"SizeOfHeaders: %xh\n",get_integer32(fn))
printf(1,"CheckSum: %xh\n",get_integer32(fn))
printf(1,"Subsystem: %d\n",get_integer16(fn))
printf(1,"DllCharactristics: %xh\n",get_integer16(fn))
printf(1,"SizeOfStackReserve: %xh\n",get_integer32(fn))
printf(1,"SizeOfStackCommit: %xh\n",get_integer32(fn))
printf(1,"SizeOfHeapReserve: %xh\n",get_integer32(fn))
printf(1,"SizeOfHeapCommit: %xh\n",get_integer32(fn))
printf(1,"LoaderFlags: %xh\n",get_integer32(fn))
printf(1,"NumberOfRvaAndSizes: %xh\n",get_integer32(fn))

puts(1,"Data Directory:\n")
pretty_print(1,get_data_directory(fn),{2,2,1,78,"#%08x","#%08x"})
puts(1,"\n\n")
puts(1,"Section Table:\n\n")
constant sections = get_section_table(fn)
puts(1,"  Name      VirtualSize  VirtualAddress PhisicalSize PhisicalOffset     Flags\n")
for i = 1 to length(sections) do
    printf(1,"%-8s      %08x      %08x      %08x      %08x      %08x\n",
        sections[i][1..5] & sections[i][$])
end for

constant pattern = {
    #8B, #C6,       -- mov eax, esi
    #80, #38, #61,  -- cmp byte [eax], 61h ; 'a'
    #7C, #1A,       -- jl short +1Ah
    #83, #F9, #10,  -- cmp ecx, 10h
    #72, #04,       -- jb short +4
    #8B, #06,       -- mov eax, [esi]
    #EB, #02,       -- jmp short +2
    #8B, #C6,       -- mov eax, esi
    #80, #38, #7A,  -- cmp byte [eax], 7Ah ; 'z'
    #7F, #0A,       -- jg short +0Ah
    #83, #F9, #10,  -- cmp ecx, 10h
    #72, #02,       -- jb short +2
    #8B, #36,       -- mov esi, [esi]
    #80, #06, #E0   -- add byte [esi], 0E0h
}

constant image_base = #400000
constant blocksize = 1024

include std/io.e

seek(fn, sections[1][SECTION_POFFSET])
object buf
for i = 1 to floor((sections[1][SECTION_PSIZE]+blocksize-1)/blocksize) do
    buf = get_bytes(fn,blocksize)
    integer pos = where(fn)
    if atom(buf) then
        exit
    end if
    integer j = find(pattern[1],buf)
    if j > 0 then
        if j > blocksize-length(pattern) then
            buf &= get_bytes(fn, length(pattern))
            seek(fn,pos)
        end if
        while 1 do
            j = match(pattern, buf, j)
            if j=0 then
                exit
            end if
            printf(1,"%x\n", image_base+sections[1][SECTION_RVA]+(i-1)*blocksize+j-1)
            atom off = sections[1][SECTION_POFFSET]+(i-1)*blocksize+j-1
            fpoke(fn,off+4,'а')
            fpoke(fn,off+20,'я')
            seek(fn,pos)
            j+=1
        end while
    end if
end for

close(fn)

any_key()
