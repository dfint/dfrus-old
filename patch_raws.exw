-- Утилита для исправления raw-файлов
include std/console.e
include std/wildcard.e
include std/filesys.e

function walker(sequence path_name, sequence item, sequence user_data)
    sequence
        src = user_data[1],
        dest = user_data[2] & '/' & path_name[length(src)+1..$],
        wildcard = user_data[3]
    integer overwrite = user_data[4]
    if is_match(wildcard, item[D_NAME]) then
        if atom(dir(dest)) then
            create_directory(dest)
        end if
        copy_file(path_name & '/' & item[D_NAME], dest & path_name[length(src)+1..$] & item[D_NAME], overwrite)
    end if
    return 0
end function

function copy_tree(sequence src, sequence dest, sequence wildcard = "*", integer overwrite = 0)
    return walk_dir(src, {routine_id("walker"), {src, dest, wildcard, overwrite}}, 1)
end function

constant
    orig = "raw/objects",
    backup = orig & ".bak",
    diffs = "diffs",
    save = "data/save"

-- Если ключ запуска -r, то восстановить равки из бэкапа

-- Проверить наличие папки raw/objects.bak
if atom(dir(backup)) then
    -- Забэкапить папку raw/objects
    copy_tree(orig, backup, "*.txt", 0)
    puts(1,"Raw files are backed up.\n")
else
    -- Восстановить файлы из бэкапа
    copy_tree(backup, orig, "*.txt", 1)
    puts(1,"Raw files are restored from backup.\n")
end if

-- Пропатчить файлы в папке raw/objects
function walk_and_patch(sequence path_name, sequence item, sequence user_data)
    sequence
        src = user_data[1],
        dest = user_data[2] & '/' & path_name[length(src)+1..$]
    if equal(fileext(item[D_NAME]), "diff") then
        puts(1,"Patching " & filebase(item[D_NAME]) & ".txt...\n")
        system("patch " & dest & filebase(item[D_NAME]) & ".txt " & path_name & '/' & item[D_NAME], 0)
    end if
    return 0
end function

walk_dir(diffs, {routine_id("walk_and_patch"), {diffs, orig}}, 1)

-- Скопировать файлы из папки raw/objects в папки data/save/регион/raw/objects
object saves = dir(save)
-- object saves = {{"current"},{"region1"},{"region2"},{"region3"}}
if atom(saves) then
    puts(1,"Save directory not found.\n")
else
    for i = 1 to length(saves) do
        if not equal(saves[i][D_NAME], "current") then
            copy_tree(orig, save & '/' & saves[i][D_NAME] & orig, 1)
        end if
    end for
end if

any_key()
