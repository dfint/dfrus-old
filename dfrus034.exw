-- Версия патча для DF 0.34.*

include std/console.e
include std/filesys.e
include std/search.e
include std/get.e
include std/sequence.e
include std/map.e
include std/convert.e
include std/text.e -- for trim()

--with trace
ifdef EUI then
    with profile
end ifdef

include patcher.e
include pe.e
include disasm.e

with define DEBUG
global integer debug = 0
constant make_call_hooks = 0

include patchdf.e
include extract_strings.e

sequence path = ""
sequence cmd = command_line()

debug = find("debug",cmd)
if debug then
    cmd = remove(cmd,debug)
    debug = 1
end if

if length(cmd)>2 then
    path = cmd[3]
end if

-- Workaround for a bug described here: http://openeuphoria.org/ticket/897.wc
if length(path)>0 and path[$]='\"' then
    path=trim(path,'\"')
end if

sequence s_pathinfo = pathinfo(path)

sequence df1

if length(s_pathinfo[2])=0 then
    path = s_pathinfo[$] & ':' & s_pathinfo[1] & '\\'
    df1 =  path & "Dwarf Fortress.exe"
else
    df1 = path
    path = s_pathinfo[$] & ':' & s_pathinfo[1] & '\\'
end if

constant df2 = path & "Dwarf Fortress Rus.exe"
atom fn, pe_header

-----------------------------------------------------------------------------
constant DF_0_34_01_SDL_stamp = #4F391A33 -- Value got from http://dwarffortresswiki.org/index.php/DF2012:Memory_hacking
fn = open_pe(df1)
if fn < 0 then
    printf(1,"Unable to open \"%s\"\n",{df1})
    any_key()
    abort(1)
end if

puts(1,"Checking timedate stamp... ")
pe_header = check_pe(fn)
constant timedate = fpeek4u(fn, pe_header+PE_TIMEDATE_STAMP)
close(fn)
if timedate < DF_0_34_01_SDL_stamp then
    puts(1,"\nWrong timedate stamp. The patcher works with DF 0.34.1 SDL and later versions.\n")
    any_key()
    abort(1)
else
    puts(1,"OK\n")
end if

-- @todo: Добавить проверку присутствия SDL.dll в импорте

-----------------------------------------------------------------------------
puts(1,"Loading translation file...\n")

constant trans_filename = "trans.txt"
object trans = load_trans_file_to_map(trans_filename)
if atom(trans) and trans=-1 then
    printf(1,"Failed.\n%s file not found.\n",{trans_filename})
    any_key()
    abort(-1)
else
    printf(1,"%d strings loaded.\n", map:size(trans))
end if

-----------------------------------------------------------------------------
printf(1,"Copying \"%s\"\nTo \"%s\"...\n", {df1,df2})

if not copy_file(df1,df2,1) then
    puts(1,"Failed.\n")
    any_key()
    abort(1)
else
    puts(1,"Success.\n")
end if

-----------------------------------------------------------------------------
puts(1,"Finding cross-referencess...\n")

fn = open_pe(df2)
if fn < 0 then
    printf(1,"Failed to open \"%s\"", {df2})
    delete_file(df2)
    any_key()
    abort(1)
end if

pe_header = check_pe(fn)
if pe_header < 0 then
    printf(1,"Failed. \"%s\" is not an executable file.",{df2})
    close(fn)
    delete_file(df2)
    any_key()
    abort(1)
end if

constant
    image_base = fpeek4u(fn, pe_header+PE_IMAGE_BASE),
    sections = get_section_table(fn, pe_header)

-- Получаем адреса всех перемещаемых элементов:
sequence relocs = get_relocations(fn,sections)

-- Получаем перекрёстные ссылки:
map xref_map = get_cross_references_to_map(fn,relocs,sections,image_base)

-----------------------------------------------------------------------------
puts(1,"Enabling the cyrillic alphabet...\n")

-- Первые несколько записей в таблице перкодировки:
constant unicode_table_start = { #20, #263A, #263B, #2665, #2666, #2663, #2660, #2022 }

-- Находим таблицу перекодировки:
function find_unicode_table(object key, object val, object user_data, integer progress_code)
    sequence buf = fpeek4u(user_data[1], {key, length(user_data[2])})
    if equal(buf, user_data[2]) then
        return key
    else
        return 0
    end if
end function

atom off = map:for_each(xref_map, routine_id("find_unicode_table"), {fn, unicode_table_start})

if not off then
    close(fn)
    puts(1,"Unicode table not found.\n")
    any_key()
    abort(-1)
end if

patch_unicode_table(fn, off)

-----------------------------------------------------------------------------
-- puts(1,"Preparing additional data section...\n")
-- Подготовка дополнительной секции данных

if equal(sections[$][SECTION_NAME],".rus") then
	close(fn)
    puts(1,"There is '.rus' section in the file already.\n")
    any_key()
    abort(-1)
end if

constant
    file_alignment = fpeek4u(fn,pe_header+PE_FILE_ALIGNMENT),
    section_alignment = fpeek4u(fn,pe_header+PE_SECTION_ALIGNMENT)

-- "Прототип" новой секции:
sequence new_section = {
    ".rus",
    0, -- Virtual Size -- виртуальный размер пока не известен
    align(sections[$][SECTION_RVA]+sections[$][SECTION_VSIZE],
        section_alignment), -- RVA -- выровнять под #1000
    0, -- Phisical Size -- физический размер пока не известен
    align(sections[$][SECTION_POFFSET] + sections[$][SECTION_PSIZE],
        file_alignment), -- Phisical Offset -- Выровнять под #200
    0,0,0,0, -- reserved
    IMAGE_SCN_CNT_INITIALIZED_DATA + IMAGE_SCN_MEM_READ + IMAGE_SCN_MEM_EXECUTE -- readable code/data
}

atom new_sect_off = new_section[SECTION_POFFSET] -- Смещение в новой секции
-- integer aligned = 0

-----------------------------------------------------------------------------
puts(1,"Translating...\n")

function second(sequence s)
    return s[2]
end function

-- sequence strings = extract_strings(fn, objs)
sequence strings = extract_strings_map(fn, xref_map)
if debug then
    printf(1,"%d strings extracted.\n", length(strings))
    if length(cmd)>=5 then
        integer lo=second(value(cmd[4])), hi=second(value(cmd[5]))
        if lo <= 0 or lo > length(strings) then
            lo = 1
            printf(1,"Lower bound is too low or too high. Set to 1.\n",lo)
        end if
        if hi < lo or hi > length(strings) then
            hi = length(strings)
            printf(1,"Higher bound is too low or too high. Set to %d.\n",hi)
        end if
        strings = strings[lo..hi]
        printf(1,"%d %d %d\n",{lo,floor((lo+hi)/2),hi})
        printf(1,"From %x to %x total %d\n",{strings[1][1], strings[$][1], length(strings)})
        if length(strings)<10 then
            for i = 1 to length(strings) do
                printf(1,"%x|%s|\n",strings[i])
            end for
        end if
    end if
end if

map funcs = map:new()

constant OFF = 1, STR = 2
for i = 1 to length(strings) do
    object translation = map:get(trans, strings[i][STR])
    if atom(translation) then
        -- if debug then
            -- printf(1,"Translation not found for \"%s\".\n", {strings[i][STR]})
        -- end if
        continue -- перевод не найден
    end if
    if equal(strings[i][STR], translation) then
        continue -- перевод равен оригиналу
    end if
    
    -- Список ссылок на данную строку:
    sequence refs = map:get(xref_map, strings[i][OFF]) 
    
    -- Если кроме ссылки на начало строки есть ссылки на ее середину,
    -- то ссылкой на строку считать самую раннюю из них
    integer l = 4
    while map:has(xref_map, strings[i][OFF]+l) and l < length(strings[i][STR])+1 do -- <= ?
        for j = 1 to length(refs) do
            sequence x = map:get(xref_map, strings[i][OFF]+l)
            integer delta = refs[j] - x[1]
            if length(x[1]) = 1 and delta>0 and delta<=6 then -- 6 - длина команды MOV REG, [IMM32]
                refs[j] = x[1]
            end if
        end for
        l += 4
    end while
    
    integer aligned_len = align(length(strings[i][STR])+1) -- Максимальная длина "короткой" строки
    integer long = aligned_len<length(translation)+1
    integer str_off
    if not long then
        -- Если строка достаточно короткая, то записать ее поверх старой:
        fpoke(fn, strings[i][OFF], pad_tail(translation & 0, aligned_len, 0)) -- назадействованные байты заполнить нулями
        -- aligned = 0
    else
        -- Если строка длинная, то записать ее в специально отведенную для этого секцию:
        str_off = new_sect_off
        new_sect_off = add_to_new_section(fn, new_sect_off, translation & 0)
    end if
    
    -- Исправляем длину строк по каждой из ссылок на нее
    for j = 1 to length(refs) do
        -- Исправить длину строки:
        object optionals = 0
        if debug then
            optionals = {strings[i][STR], translation, sections[code], image_base}
        end if
        object fix = fix_len(fn, refs[j], length(strings[i][STR]), length(translation), optionals)
        if sequence(fix) then -- не удалось исправить длину по причине джампа
            if length(fix)=2 then
                -- возвращены только исходный адрес и адрес перехода
                if debug then
                    printf(1,"Unable to add stitch at #%x for |%s|%s| (short jump to #%x)\n", {
                        off_to_rva_ex(fix[1],sections[code])+image_base,
                        strings[i][STR],
                        translation,
                        off_to_rva_ex(fix[2],sections[code])+image_base
                    })
                end if
            else
                -- Функция fix_len вернула смещение команды перехода, машинный код и смещение выхода
                -- {src, mach, dest, op} = fix
                if fix[4]=CALL_NEAR and make_call_hooks then
                    -- Создаем таблицу функций (конструкторов строк)
                    -- В будущем в этой таблице можно хранить информацию о способе передачи аргументов
                    map x = map:get(funcs,fix[3],map:new())
                    map:put(x, fix[2], off_to_rva_ex(fix[1], sections[code]), APPEND)
                    map:put(funcs,fix[3],x)
                else
                    fix_it(fix[1],fix)
                end if
            end if
            fix = -1 -- считаем, что длина строки исправлена (даже если наткнулись на short jmp)
        end if
        if fix != 0 then -- Удалось исправить длину, или исправление не требуется
            if fix = -2 and debug then -- не удалось исправить длину, но скорее всего нужно
                printf(1,"|%s|%s| <- %x (%x)\n",
                    {strings[i][STR], translation} & refs[j] & ( off_to_rva_ex(refs[j], sections[code])+image_base ) )
                puts(1, "SUSPICIOUS: Failed to fix length.\n") -- скорее всего код поломался
            end if
            if long then -- Если строка длинная, то исправить ссылку на строку в коде:
                fpoke4(fn, refs[j], off_to_rva_ex(str_off, new_section)+image_base)
            end if
        elsif long then -- Если не удалось исправить длину:
            -- Считываем 3 байта перед ссылкой для нахождения начала копирующего кода
            sequence pre = fpeek(fn, {refs[j]-3, 3})
            -- Находим начало копирующего кода:
            integer start = refs[j]-get_start(pre)
            -- Получаем длину кода, копирующего строку:
            object x = get_length( fpeek(fn, {start, 100}), length(strings[i][STR])+1)
            
            if sequence(x) then
                -- Получаем машинный код, копирующий строку:
                integer src = off_to_rva_ex(str_off, new_section)+image_base
                sequence mach = mach_memcpy(src, x[2], length(translation)+1)
                integer new_ref_off = mach[$] -- относительное положение ссылки внутри сгенерированного кода
                mach = mach[1..$-1]
                -- Добавляем в машинный код затираемое lea, т.к. значение может использоваться ниже по коду:
                if sequence(x[4]) then
                    mach &= lea(x[4][1],x[4][2..3])
                end if
                integer start_rva = off_to_rva_ex(start, sections[code]) -- RVA начала изменяемого кода
                integer new_ref -- Адрес новой ссылки
                if length(mach) > x[1] then
                    -- Полученный машинный код не умещается на первоначальное место
                    sequence proc = mach & RET_NEAR -- Превращаем сгенерированный код в процедуру
                    atom dest_off = new_sect_off,
                         dest_rva = off_to_rva_ex(dest_off, new_section)
                    -- По первоначальному местоположению копирующего кода пропишем вызов процедуры
                    integer disp = dest_rva-(start_rva+5)
                    mach = CALL_NEAR & int_to_bytes(disp)
                    if length(mach) > x[1] then -- 5 > x[1]
                        if debug then
                            printf(1,"|%s|%s| <- %x (%x)\n",
                                {strings[i][STR], translation} & refs[j] & ( off_to_rva_ex(refs[j], sections[code])+image_base ) )
                            printf(1, "Mach code is too long (%d against %d).\n",{length(mach),x[1]})
                        end if
                        continue -- полученный машинный код не уместился
                    end if
                    -- Прописываем код процедуры в новую секцию:
                    new_sect_off = add_to_new_section(fn, dest_off, proc)
                    new_ref = dest_rva+new_ref_off
                else
                    new_ref = start_rva+new_ref_off
                end if
                -- Исправляем релокации --
                x[3] += start_rva-1 -- получаем адреса удаленных ссылок
                integer mod_reloc = modify_relocations(fn, sections, (-x[3]) & new_ref)
                if mod_reloc = 0 then
                    -- Если удалось исправить релокации, то правим код:
                    mach = pad_tail(mach, x[1], NOP) -- добиваем освободившиеся байты пустыми командами
                    fpoke(fn, start, mach)
                elsif debug then
                    printf(1,"|%s|%s| <- %x (%x)\n",
                        {strings[i][STR], translation} & refs[j] & ( off_to_rva_ex(refs[j], sections[code])+image_base ) )
                    printf(1, "Failed to fix relocations (Returned #%x).\n",mod_reloc)
                end if
            elsif debug then
                printf(1,"|%s|%s| <- %x (%x)\n",
                    {strings[i][STR], translation} & refs[j] & ( off_to_rva_ex(refs[j], sections[code])+image_base ) )
                printf(1,"Failed to obtain copying code length (Returned %d).\n",x)
            end if
        end if
    end for
end for

-- Отложенное исправление
function fix_it(object key, object fix, object user_data = 0, integer progress_code = 0)
    atom src = fix[1]
    sequence mach = fix[2]
    atom dest = fix[3]
    
    atom
        stitch_off = new_sect_off,
        stitch_rva = off_to_rva_ex(stitch_off, new_section),
        dest_rva = off_to_rva_ex(dest, sections[code]),
        disp = dest_rva-(stitch_rva+length(mach)+5), -- смещение перехода из петли
        src_rva = off_to_rva_ex(src, sections[code])
        
    mach &= JMP_NEAR & int_to_bytes(disp) -- добавляем выход из петли в нужное место
    -- Прописываем код петли в новую секцию:
    new_sect_off = add_to_new_section(fn, stitch_off, mach)
    disp = stitch_rva-(src_rva+5)
    fpoke4(fn, src+1, disp) -- делаем переход на петлю
    return 0
end function

function add_call_hook(object key, object val, object user_data, integer progress_code)
    sequence mach = flatten(map:keys(val))
    atom dest = key
    atom
        stitch_off = new_sect_off,
        stitch_rva = off_to_rva_ex(stitch_off, new_section),
        dest_rva = off_to_rva_ex(key, sections[code])
    
    if debug then
        printf(1,"%x\n",dest_rva+image_base)
        sequence pairs = map:pairs(val)
        for i = 1 to length(pairs) do
            print_hex_seq(1,pairs[i][1])
            printf(1,": %d entries",length(pairs[i][2]))
            if length(pairs[i][2])>0 then
                printf(1,"\nFirst entry: %x\n",pairs[i][2][1]+image_base)
            end if
        end for
        puts(1,"\n")
    end if
    
    sequence code = fpeek(fn, {key, #10})
    integer i = 1
    while i<5+1 do -- 5 байт на jmp near + 1 байт т.к. i должен указывать как минимум на 6й байт
        object x = disasm(0,code,i)
        i = x[$]
    end while
    
    sequence saved_code = code[1..i-1]
    
    mach &= saved_code
    
    atom disp = dest_rva+length(saved_code)-(stitch_rva+length(mach)+5)
    
    mach &= JMP_NEAR & int_to_bytes(disp)
    
    new_sect_off = add_to_new_section(fn, stitch_off, mach)
    
    atom src = key
    atom src_rva = off_to_rva_ex(src, sections[code])
    disp = stitch_rva-(src_rva+5)
    fpoke(fn, src, JMP_NEAR)
    fpoke4(fn, src+1, disp)
    
    return 0
end function

if make_call_hooks then
    for_each(funcs, routine_id("add_call_hook"))
end if

-----------------------------------------------------------------------------
-- Физическое добавление новой секции

-- Создавать новую секцию только при ненулевом ее размере:
if new_sect_off > new_section[SECTION_POFFSET] then
    -- Выровнять физический размер секции и файла под #200
    atom file_size = align(new_sect_off, file_alignment)
    -- Указываем физический размер секции:
    new_section[SECTION_PSIZE] = file_size - new_section[SECTION_POFFSET]
    
    puts(1,"Adding new data section...\n")
    
    -- Выровнять размер файла:
    seek(fn,file_size-1)
    puts(fn,0)

    -- Виртуальный размер секции, выравнивать не нужно:
    new_section[SECTION_VSIZE] = new_sect_off - new_section[SECTION_POFFSET] 

    -- Записать информацию о секции: 
    put_section_info(fn,
        pe_header + SIZEOF_PE_HEADER + length(sections)*SIZEOF_IMAGE_SECTION_HEADER,
        new_section)

    -- Исправить значение поля количества секций:
    fpoke2(fn, pe_header + PE_NUMBER_OF_SECTIONS, length(sections)+1)

    -- Изменить поле ImageSize PE-заголовка с учетом новой секции и выровнять под #1000:
    fpoke4(fn, pe_header + PE_SIZE_OF_IMAGE,
        align(new_section[SECTION_RVA] + new_section[SECTION_VSIZE],
            section_alignment))
end if

close(fn)

puts(1,"Done.\n")
any_key()
